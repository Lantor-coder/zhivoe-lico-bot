import os
import json
import hmac
import hashlib
import aiohttp
from aiohttp import web
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
PRODAMUS_SECRET = os.getenv("PRODAMUS_SECRET")
BASE_URL = "https://nastroikatela.payform.ru/"
WEBHOOK_URL = "https://zhivoe-lico-bot-1.onrender.com/webhook"
CHANNEL_ID = -1003189812929
PRICE = 4500

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()


# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ—Ä–æ—Ç–∫–æ–π –ø–ª–∞—Ç—ë–∂–Ω–æ–π —Å—Å—ã–ª–∫–∏ ===
async def create_payment_link(order_id: int) -> str:
    payload = {
        "do": "link",
        "order_id": order_id,
        "products[0][name]": "–û–Ω–ª–∞–π–Ω-–∫—É—Ä—Å '–ñ–∏–≤–æ–µ –ª–∏—Ü–æ'",
        "products[0][price]": PRICE,
        "products[0][quantity]": 1,
        "customer_extra": "–û–ø–ª–∞—Ç–∞ –∫—É—Ä—Å–∞ '–ñ–∏–≤–æ–µ –ª–∏—Ü–æ'",
        "urlNotification": "https://zhivoe-lico-bot-1.onrender.com/access",
    }

    async with aiohttp.ClientSession() as session:
        async with session.post(BASE_URL, data=payload) as resp:
            text = await resp.text()
            print(f"üìé –û—Ç–≤–µ—Ç Prodamus: {text}")
            return text.strip()


# === /start ===
@dp.message(CommandStart())
async def cmd_start(message: types.Message):
    print(f"üöÄ –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç {message.from_user.id}")
    pay_link = await create_payment_link(message.from_user.id)
    if not pay_link.startswith("http"):
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        return

    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç üåø\n\n"
        f"–í–æ—Ç —Å—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã –∫—É—Ä—Å–∞:\n<a href='{pay_link}'>–û–ø–ª–∞—Ç–∏—Ç—å –∫—É—Ä—Å</a>\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—à–ª—ë—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É üí´",
        disable_web_page_preview=True,
    )


# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ ===
def verify_signature(data: dict, signature: str) -> bool:
    if not signature or not PRODAMUS_SECRET:
        return False
    json_data = json.dumps(data, ensure_ascii=False, separators=(",", ":"))
    calc = hmac.new(
        PRODAMUS_SECRET.encode(), msg=json_data.encode(), digestmod=hashlib.sha256
    ).hexdigest()
    return hmac.compare_digest(calc, signature.strip().lower())


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π Prodamus ===
async def handle_access(request: web.Request):
    try:
        raw = await request.text()
        headers = dict(request.headers)
        print("üì¨ –ü—Ä–∏—à—ë–ª POST /access")
        print("üî∏ –ó–∞–≥–æ–ª–æ–≤–∫–∏:", headers)
        print("üî∏ –¢–µ–ª–æ:", raw)

        signature = headers.get("Sign")
        data = json.loads(raw)

        if not verify_signature(data, signature):
            print("‚ö†Ô∏è –ü–æ–¥–ø–∏—Å—å –Ω–µ —Å–æ–≤–ø–∞–ª–∞!")
            return web.Response(text="invalid signature", status=403)

        if data.get("status") != "success":
            print("‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –Ω–µ success:", data.get("status"))
            return web.Response(text="not success", status=200)

        user_id = int(data.get("order_id", 0))
        if not user_id:
            print("‚ö†Ô∏è –ù–µ—Ç user_id")
            return web.Response(text="no user_id", status=400)

        invite = await bot.create_chat_invite_link(
            chat_id=CHANNEL_ID, member_limit=1, name=f"invite_{user_id}"
        )
        await bot.send_message(
            user_id,
            f"üéâ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞!\n\n–í–æ—Ç —Ç–≤–æ—è —Å—Å—ã–ª–∫–∞:\n{invite.invite_link}"
        )
        print(f"‚úÖ –°—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        return web.Response(text="ok", status=200)

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", e)
        return web.Response(status=500)


# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–±—Ö—É–∫–∞ ===
async def on_startup(app):
    await bot.delete_webhook(drop_pending_updates=True)
    await bot.set_webhook(WEBHOOK_URL)
    print(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")


def setup_app():
    app = web.Application()
    app.router.add_post("/access", handle_access)

    # –í–ê–ñ–ù–û: —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º webhook endpoint
    webhook_handler = SimpleRequestHandler(dispatcher=dp, bot=bot)
    webhook_handler.register(app, path="/webhook")

    setup_application(app, dp, bot=bot)
    app.on_startup.append(on_startup)
    return app


if __name__ == "__main__":
    app = setup_app()
    web.run_app(app, host="0.0.0.0", port=int(os.getenv("PORT", 10000)))

