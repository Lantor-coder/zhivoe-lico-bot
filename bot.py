import asyncio
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiohttp import web

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = os.getenv("BOT_TOKEN")
ACCESS_SECRET = os.getenv("ACCESS_SECRET")  # —Å–µ–∫—Ä–µ—Ç –¥–ª—è n8n
CHANNEL_ID = -1003189812929  # id –∑–∞–∫—Ä—ã—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞
PRODAMUS_LINK = "https://payform.ru/cd9qXh7/"  # —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É

bot = Bot(token=TOKEN)
dp = Dispatcher()


# === /start ===
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    tg_id = message.from_user.id
    pay_link = f"{PRODAMUS_LINK}?custom_fields[telegram_id]={tg_id}"
    text = (
        "–ü—Ä–∏–≤–µ—Ç üåø\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ–ø–ª–∞—Ç–∏—Ç—å –∏ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –æ–Ω–ª–∞–π–Ω-–∫—É—Ä—Å—É –ê–Ω—Ç–æ–Ω–∏—è –õ–∞–Ω–∏–Ω–∞ ¬´–ñ–∏–≤–æ–µ –ª–∏—Ü–æ¬ª.\n\n"
        f"üëâ –û–ø–ª–∞—Ç–∞ –ø–æ —Å—Å—ã–ª–∫–µ:\n{pay_link}\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—à–ª—ë—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª üí´"
    )
    await message.answer(text)


# === –§–£–ù–ö–¶–ò–Ø –í–´–î–ê–ß–ò –î–û–°–¢–£–ü–ê ===
async def give_access(user_id: int):
    """–°–æ–∑–¥–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –∏ –≤—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø"""
    try:
        invite_link = await bot.create_chat_invite_link(
            chat_id=CHANNEL_ID,
            name=f"access_{user_id}",
            member_limit=1,
            expire_date=None
        )
        await bot.send_message(
            chat_id=user_id,
            text=(
                f"üéâ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞!\n\n"
                f"–í–æ—Ç –≤–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∫—É—Ä—Å:\n\n"
                f"{invite_link.invite_link}"
            )
        )
    except Exception as e:
        await bot.send_message(chat_id=user_id, text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –¥–æ—Å—Ç—É–ø–∞: {e}")


# === HTTP-—Ä—É—á–∫–∞ /access –¥–ª—è n8n ===
async def handle_access(request):
    """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∏–∑ n8n –∏ –≤—ã–¥–∞—ë—Ç –¥–æ—Å—Ç—É–ø, –µ—Å–ª–∏ —Å–µ–∫—Ä–µ—Ç —Å–æ–≤–ø–∞–¥–∞–µ—Ç"""
    try:
        data = await request.json()
        secret = request.headers.get("X-Access-Secret")  # üîí –∑–∞—â–∏—Ç–∞
        if secret != ACCESS_SECRET:
            return web.Response(text="Forbidden", status=403)

        user_id = data.get("telegram_id")
        status = data.get("status")

        if not user_id:
            return web.Response(text="No telegram_id", status=400)

        if status != "paid":
            return web.Response(text="Not paid", status=200)

        await give_access(int(user_id))
        return web.Response(text="ok", status=200)

    except Exception as e:
        return web.Response(text=f"Error: {e}", status=500)


# === –ü–†–û–°–¢–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–ï–†–í–ï–†–ê ===
async def handle_root(_):
    return web.Response(text="ok")


# === WEBHOOK –î–õ–Ø TELEGRAM (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Webhook-—Ä–µ–∂–∏–º) ===
from aiogram import types
async def handle_webhook(request):
    data = await request.json()
    update = types.Update.model_validate(data)
    await dp.feed_update(bot, update)
    return web.Response(text="ok")


# === –°–¢–ê–†–¢ –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ===
async def on_startup(app):
    asyncio.create_task(dp.start_polling(bot))
    print("‚úÖ Aiogram polling started")


def create_app():
    app = web.Application()
    app.router.add_get("/", handle_root)         # –ø—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç
    app.router.add_post("/access", handle_access) # n8n ‚Üí –±–æ—Ç
    app.router.add_post("/webhook", handle_webhook)  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
    app.on_startup.append(on_startup)
    return app


if __name__ == "__main__":
    app = create_app()
    port = int(os.environ.get("PORT", 8080))
    web.run_app(app, host="0.0.0.0", port=port)
