import asyncio
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiohttp import web

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = -1003189812929
PRODAMUS_LINK = "https://payform.ru/cd9qXh7/"
SECRET_KEY = os.getenv("ACCESS_SECRET", "my_secret_key")  # üîí –∫–ª—é—á –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–∑–æ–≤–æ–≤ –∏–∑ n8n

bot = Bot(token=TOKEN)
dp = Dispatcher()


# === –°–¢–ê–†–¢ ===
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    tg_id = message.from_user.id
    pay_link = f"{PRODAMUS_LINK}?custom_fields[telegram_id]={tg_id}"
    text = (
        "–ü—Ä–∏–≤–µ—Ç üåø\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ–ø–ª–∞—Ç–∏—Ç—å –∏ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –æ–Ω–ª–∞–π–Ω-–∫—É—Ä—Å—É –ê–Ω—Ç–æ–Ω–∏—è –õ–∞–Ω–∏–Ω–∞ ¬´–ñ–∏–≤–æ–µ –ª–∏—Ü–æ¬ª.\n\n"
        f"üëâ –û–ø–ª–∞—Ç–∞ –ø–æ —Å—Å—ã–ª–∫–µ:\n{pay_link}\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—à–ª—ë—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª üí´"
    )
    await message.answer(text)


# === –°–ï–†–í–ï–† –î–õ–Ø N8N ===
async def handle_access(request):
    """–í—ã–¥–∞—ë—Ç –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Å–µ–∫—Ä–µ—Ç–Ω–æ–º –∫–ª—é—á–µ"""
    data = await request.json()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∫—Ä–µ—Ç
    secret = request.headers.get("X-Access-Secret")
    if secret != SECRET_KEY:
        return web.Response(text="Unauthorized", status=401)

    user_id = data.get("telegram_id")
    if not user_id or not str(user_id).isdigit():
        return web.Response(text="Invalid telegram_id", status=400)

    try:
        # –°–æ–∑–¥–∞—ë–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
        invite_link = await bot.create_chat_invite_link(
            chat_id=CHANNEL_ID,
            name=f"access_{user_id}",
            member_limit=1,
            expire_date=None,  # –º–æ–∂–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å —Å—Ä–æ–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ 1 –¥–µ–Ω—å
        )

        await bot.send_message(
            chat_id=int(user_id),
            text=(
                f"üéâ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n"
                f"–í–æ—Ç –≤–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∫—É—Ä—Å:\n\n"
                f"{invite_link.invite_link}"
            ),
        )
        return web.Response(text="ok", status=200)

    except Exception as e:
        return web.Response(text=str(e), status=500)


async def on_startup(app):
    asyncio.create_task(dp.start_polling(bot))
    print("‚úÖ Aiogram polling started")


def create_app():
    app = web.Application()
    app.router.add_get("/", lambda _: web.Response(text="ok"))  # Render health check
    app.router.add_post("/access", handle_access)  # üîí –∑–∞—â–∏—â—ë–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è n8n
    app.on_startup.append(on_startup)
    return app


# === –ó–ê–ü–£–°–ö ===
if __name__ == "__main__":
    app = create_app()
    port = int(os.environ.get("PORT", 8080))
    web.run_app(app, host="0.0.0.0", port=port)
