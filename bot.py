import os
import hmac
import hashlib
from urllib.parse import urlencode, parse_qs
from aiohttp import web
from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
PRODAMUS_SECRET = os.getenv("PRODAMUS_SECRET")
CHANNEL_LINK = "https://t.me/+YOUR_CHANNEL_INVITE_LINK"  # –∑–∞–º–µ–Ω–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
PRICE = 4500
BASE_URL = "https://nastroikatela.payform.ru"
WEBHOOK_URL = "https://zhivoe-lico-bot-1.onrender.com/webhook"

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()


# === –°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É ===
def create_invoice(tg_id: int) -> str:
    params = {
        "order_num": tg_id,
        "customer_extra": "–û–ø–ª–∞—Ç–∞ –∫—É—Ä—Å–∞ '–ñ–∏–≤–æ–µ –ª–∏—Ü–æ'",
        "products[0][name]": "–û–Ω–ª–∞–π–Ω-–∫—É—Ä—Å '–ñ–∏–≤–æ–µ –ª–∏—Ü–æ'",
        "products[0][price]": PRICE,
        "products[0][quantity]": 1,
        "do": "pay",
        "urlNotification": "https://zhivoe-lico-bot-1.onrender.com/access",
        "urlSuccess": "https://zhivoe-lico-bot-1.onrender.com/success",
        "urlReturn": "https://zhivoe-lico-bot-1.onrender.com/fail",
    }
    return f"{BASE_URL}?{urlencode(params, doseq=True)}"


# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ Prodamus (—Ç–æ—á–Ω–æ –∫–∞–∫ Hmac::verify($_POST,...)) ===
def compute_prodamus_signature(secret: str, form_data: dict) -> str:
    sorted_items = sorted(form_data.items())
    message = "&".join(f"{k}={v}" for k, v in sorted_items)
    return hmac.new(secret.encode(), message.encode(), hashlib.sha256).hexdigest()


# === –ö–æ–º–∞–Ω–¥–∞ /start ===
@dp.message(commands=["start"])
async def cmd_start(message: types.Message):
    pay_link = create_invoice(message.from_user.id)
    text = (
        "–ü—Ä–∏–≤–µ—Ç üåø\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ–ø–ª–∞—Ç–∏—Ç—å –∏ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –æ–Ω–ª–∞–π–Ω-–∫—É—Ä—Å—É –ê–Ω—Ç–æ–Ω–∏—è –õ–∞–Ω–∏–Ω–∞ <b>¬´–ñ–∏–≤–æ–µ –ª–∏—Ü–æ¬ª</b>.\n\n"
        f"üëâ <a href='{pay_link}'>–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ (4500 ‚ÇΩ)</a>\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—à–ª—ë—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª üí´"
    )
    await message.answer(text, disable_web_page_preview=True)


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π Prodamus ===
async def handle_access(request: web.Request):
    print("üì© –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!")
    headers = dict(request.headers)
    raw_sign = headers.get("Sign", "").replace("Sign:", "").strip()

    body = await request.text()
    data = {k: v[0] for k, v in parse_qs(body).items()}

    print("üîπ Parsed data:", data)
    print("üßæ Sign –∏–∑ –∑–∞–ø—Ä–æ—Å–∞:", raw_sign)

    expected_signature = compute_prodamus_signature(PRODAMUS_SECRET, data)
    print("üßÆ –ù–∞—à —Ä–∞—Å—á—ë—Ç:", expected_signature)

    if raw_sign != expected_signature:
        print("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å")
        return web.Response(text="invalid signature", status=403)

    # –ï—Å–ª–∏ –≤—Å—ë –æ–∫ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if data.get("payment_status") == "success":
        try:
            user_id = int(data.get("order_num"))
            await bot.send_message(
                user_id,
                f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞!\n\n–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫—É—Ä—Å:\n{CHANNEL_LINK}"
            )
            print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    return web.Response(text="success", status=200)


# === –°—Ç—Ä–∞–Ω–∏—Ü—ã —É—Å–ø–µ—Ö–∞ –∏ –æ—à–∏–±–∫–∏ ===
async def success_page(request):
    return web.Response(text="‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞! –°—Å—ã–ª–∫–∞ –ø—Ä–∏–¥—ë—Ç –≤ Telegram-–±–æ—Ç.", content_type="text/html")

async def fail_page(request):
    return web.Response(text="‚ùå –û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", content_type="text/html")


# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –≤–µ–±—Ö—É–∫–∞ ===
async def on_startup(app):
    await bot.delete_webhook(drop_pending_updates=True)
    await bot.set_webhook(WEBHOOK_URL)
    print(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")


def setup_app():
    app = web.Application()
    app.router.add_post("/access", handle_access)
    app.router.add_get("/success", success_page)
    app.router.add_get("/fail", fail_page)
    app.on_startup.append(on_startup)
    return app


if __name__ == "__main__":
    web.run_app(setup_app(), host="0.0.0.0", port=int(os.getenv("PORT", 10000)))
