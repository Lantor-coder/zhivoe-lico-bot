import os
import hmac
import hashlib
import json
from urllib.parse import urlencode, parse_qs, unquote_plus
from aiohttp import web
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
PRODAMUS_SECRET = os.getenv("PRODAMUS_SECRET")  # üîë –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –∏–∑ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ Prodamus
BASE_URL = "https://nastroikatela.payform.ru/"
WEBHOOK_URL = "https://zhivoe-lico-bot-1.onrender.com/webhook"
CHANNEL_ID = -1000000000000  # üîÑ –∑–∞–º–µ–Ω–∏ –Ω–∞ ID —Ç–≤–æ–µ–≥–æ –∑–∞–∫—Ä—ã—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞ (–º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å —á–µ—Ä–µ–∑ @userinfobot)
PRICE = 4500  # —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫—É—Ä—Å–∞

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞—Ç—ë–∂–Ω–æ–π —Å—Å—ã–ª–∫–∏ ===
def create_invoice(tg_id: int) -> str:
    """–°–æ–∑–¥–∞—ë—Ç —Å—Å—ã–ª–∫—É Prodamus –¥–ª—è –æ–ø–ª–∞—Ç—ã"""
    params = {
        "order_num": tg_id,
        "customer_extra": "–û–ø–ª–∞—Ç–∞ –∫—É—Ä—Å–∞ '–ñ–∏–≤–æ–µ –ª–∏—Ü–æ'",
        "products[0][name]": "–û–Ω–ª–∞–π–Ω-–∫—É—Ä—Å '–ñ–∏–≤–æ–µ –ª–∏—Ü–æ'",
        "products[0][price]": PRICE,
        "products[0][quantity]": 1,
        "do": "pay",
        "urlSuccess": "https://t.me/nastroika_tela",
        "urlReturn": "https://t.me/nastroika_tela",
        "urlNotification": "https://zhivoe-lico-bot-1.onrender.com/access",
    }
    return f"{BASE_URL}?{urlencode(params, doseq=True)}"

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
@dp.message(CommandStart())
async def start_cmd(message: types.Message):
    pay_link = create_invoice(message.from_user.id)
    text = (
        "–ü—Ä–∏–≤–µ—Ç üåø\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ–ø–ª–∞—Ç–∏—Ç—å –∏ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –æ–Ω–ª–∞–π–Ω-–∫—É—Ä—Å—É –ê–Ω—Ç–æ–Ω–∏—è –õ–∞–Ω–∏–Ω–∞ ¬´–ñ–∏–≤–æ–µ –ª–∏—Ü–æ¬ª.\n\n"
        f"üëâ <a href='{pay_link}'>–û–ø–ª–∞—Ç–∏—Ç—å –∫—É—Ä—Å</a>\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—à–ª—ë—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª üí´"
    )
    await message.answer(text, disable_web_page_preview=True)

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ Prodamus ===
def verify_signature(secret: str, raw_body: str, sent_sign: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç Prodamus"""
    try:
        calculated = hmac.new(
            key=secret.encode(),
            msg=raw_body.encode(),
            digestmod=hashlib.sha256
        ).hexdigest()
        return hmac.compare_digest(calculated, sent_sign)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∏:", e)
        return False

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ–ø–ª–∞—Ç–µ ===
async def handle_access(request: web.Request):
    try:
        raw = await request.text()
        headers = dict(request.headers)
        print("üì© –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!")
        print("üî∏ Headers:", headers)
        print("üî∏ Body:", raw)

        # –ü–∞—Ä—Å–∏–º —Ç–µ–ª–æ
        data = {k: unquote_plus(v[0]) for k, v in parse_qs(raw).items()}
        print("üîπ Parsed data:", data)

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–¥–ø–∏—Å—å
        raw_sign = headers.get("Sign", "")
        signature = raw_sign.replace("Sign:", "").strip()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å
        expected_signature = hmac.new(
            key=PRODAMUS_SECRET.encode(),
            msg=raw.encode(),
            digestmod=hashlib.sha256
        ).hexdigest()

        print(f"üßæ Sign –∏–∑ –∑–∞–ø—Ä–æ—Å–∞: {signature}")
        print(f"üßÆ –ù–∞—à —Ä–∞—Å—á—ë—Ç: {expected_signature}")

        if signature != expected_signature:
            print("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å")
            return web.Response(text="invalid signature", status=403)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        if data.get("payment_status") != "success":
            print(f"‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å –Ω–µ 'success': {data.get('payment_status')}")
            return web.Response(text="not success", status=200)

        # –ü–æ–ª—É—á–∞–µ–º Telegram ID
        user_id = int(data.get("order_num", 0))
        if not user_id:
            print("‚ö†Ô∏è –ù–µ—Ç user_id (order_num)")
            return web.Response(text="no user_id", status=400)

        # –°–æ–∑–¥–∞—ë–º –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
        invite = await bot.create_chat_invite_link(
            chat_id=CHANNEL_ID, member_limit=1, name=f"invite_{user_id}"
        )
        await bot.send_message(
            user_id,
            f"üéâ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞!\n\n–í–æ—Ç —Ç–≤–æ—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫—É—Ä—Å:\n{invite.invite_link}"
        )
        print(f"‚úÖ –°—Å—ã–ª–∫–∞ –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

        return web.Response(text="ok", status=200)

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", e)
        return web.Response(status=500)

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞ ===
async def on_startup(app: web.Application):
    await bot.delete_webhook(drop_pending_updates=True)
    await bot.set_webhook(WEBHOOK_URL)
    print(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

# === –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ aiohttp ===
def setup_app() -> web.Application:
    app = web.Application()
    app.router.add_post("/access", handle_access)
    webhook_handler = SimpleRequestHandler(dispatcher=dp, bot=bot)
    webhook_handler.register(app, path="/webhook")
    setup_application(app, dp, bot=bot)
    app.on_startup.append(on_startup)
    return app

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    app = setup_app()
    web.run_app(app, host="0.0.0.0", port=int(os.getenv("PORT", 10000)))
