import asyncio
import hashlib
import hmac
import os
from urllib.parse import parse_qs
from aiohttp import web
from aiogram import Bot, Dispatcher, types

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
TOKEN = os.getenv("BOT_TOKEN")
PRODAMUS_SECRET = os.getenv("PRODAMUS_SECRET")  # —Ç–æ—Ç —Å–∞–º—ã–π —Å–µ–∫—Ä–µ—Ç –∏–∑ Prodamus
CHANNEL_LINK = "https://t.me/+xxxxxxxxxxxx"     # —Å—é–¥–∞ –¥–∞—Ç—å –¥–æ—Å—Ç—É–ø –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
PRICE = 4500
BASE_URL = "https://nastroikatela.payform.ru"   # —Ç–≤–æ—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ Prodamus

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# --- –£—Ç–∏–ª–∏—Ç–∞: —Å–æ–∑–¥–∞—ë–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É ---
from urllib.parse import urlencode

def create_invoice(tg_id: int) -> str:
    """–°–æ–∑–¥–∞—ë—Ç —Å—Å—ã–ª–∫—É Prodamus –¥–ª—è –æ–ø–ª–∞—Ç—ã"""
    params = {
        "order_num": tg_id,
        "customer_extra": "–û–ø–ª–∞—Ç–∞ –∫—É—Ä—Å–∞ '–ñ–∏–≤–æ–µ –ª–∏—Ü–æ'",
        "products[0][name]": "–û–Ω–ª–∞–π–Ω-–∫—É—Ä—Å '–ñ–∏–≤–æ–µ –ª–∏—Ü–æ'",
        "products[0][price]": PRICE,
        "products[0][quantity]": 1,
        "do": "pay",
        "urlSuccess": "https://zhivoe-lico-bot-1.onrender.com/success",
        "urlReturn": "https://zhivoe-lico-bot-1.onrender.com/fail",
        "urlNotification": "https://zhivoe-lico-bot-1.onrender.com/access",
    }
    return f"{BASE_URL}?{urlencode(params, doseq=True)}"


# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º Prodamus ---
def compute_prodamus_signature(secret: str, form_data: dict) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å—å –≤ —Ç–æ—á–Ω–æ—Å—Ç–∏ –∫–∞–∫ —É Prodamus (–∞–Ω–∞–ª–æ–≥ Hmac::verify($_POST,...))"""
    sorted_items = sorted(form_data.items())
    message = "&".join(f"{k}={v}" for k, v in sorted_items)
    return hmac.new(secret.encode(), message.encode(), hashlib.sha256).hexdigest()


# --- –•—ç–Ω–¥–ª–µ—Ä —Å—Ç–∞—Ä—Ç–∞ ---
@dp.message_handler(commands=["start"])
async def start_cmd(message: types.Message):
    link = create_invoice(message.from_user.id)
    await message.answer(
        "üí≥ –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—É—Ä—Å—É ¬´–ñ–∏–≤–æ–µ –ª–∏—Ü–æ¬ª –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=types.InlineKeyboardMarkup().add(
            types.InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å 4500‚ÇΩ", url=link)
        )
    )


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞ –æ—Ç Prodamus ---
async def handle_access(request: web.Request):
    print("üì© –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!")

    headers = dict(request.headers)
    raw_sign = headers.get("Sign", "")
    signature = raw_sign.replace("Sign:", "").strip()

    body = await request.text()
    data = {k: v[0] for k, v in parse_qs(body).items()}

    print("üîπ Parsed data:", data)
    print("üßæ Sign –∏–∑ –∑–∞–ø—Ä–æ—Å–∞:", signature)

    expected_signature = compute_prodamus_signature(PRODAMUS_SECRET, data)
    print("üßÆ –ù–∞—à —Ä–∞—Å—á—ë—Ç:", expected_signature)

    if signature != expected_signature:
        print("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å")
        return web.Response(text="invalid signature", status=403)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–ø–ª–∞—Ç—É
    if data.get("payment_status") == "success":
        order_num = data.get("order_num")
        try:
            user_id = int(order_num)
            await bot.send_message(
                user_id,
                f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞!\n\n–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª —Å –∫—É—Ä—Å–æ–º:\n{CHANNEL_LINK}"
            )
            print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")

    return web.Response(text="success", status=200)


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã ---
async def success_page(request):
    return web.Response(text="‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞! –°—Å—ã–ª–∫–∞ –Ω–∞ –∫—É—Ä—Å –ø—Ä–∏–¥—ë—Ç –≤ –≤–∞—à Telegram.", content_type="text/html")

async def fail_page(request):
    return web.Response(text="‚ùå –û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", content_type="text/html")


# --- –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –∏ –±–æ—Ç–∞ ---
async def on_startup(app):
    webhook_url = "https://zhivoe-lico-bot-1.onrender.com/webhook"
    await bot.set_webhook(webhook_url)
    print(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")

app = web.Application()
app.router.add_post("/access", handle_access)
app.router.add_get("/success", success_page)
app.router.add_get("/fail", fail_page)

app.on_startup.append(on_startup)

if __name__ == "__main__":
    web.run_app(app, host="0.0.0.0", port=int(os.getenv("PORT", 10000)))
