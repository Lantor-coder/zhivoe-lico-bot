import os
import asyncio
import json
import hmac
import hashlib
import requests
from aiohttp import web
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = os.getenv("BOT_TOKEN")
PRODAMUS_API_KEY = os.getenv("PRODAMUS_API_KEY")
CHANNEL_ID = -1003189812929
PRICE = 4500
BASE_URL = "https://zhivoe-lico-bot.onrender.com"  # URL —Ç–≤–æ–µ–≥–æ –±–æ—Ç–∞ –Ω–∞ Render

bot = Bot(token=TOKEN)
dp = Dispatcher()

# === –°–û–ó–î–ê–ù–ò–ï –°–°–´–õ–ö–ò –ù–ê –û–ü–õ–ê–¢–£ ===
def create_invoice(tg_id: int):
    url = "https://payform.ru/api/v1/invoice"
    headers = {"Authorization": f"Bearer {PRODAMUS_API_KEY}"}
    payload = {
        "sum": PRICE,
        "currency": "rub",
        "order_num": str(tg_id),
        "type": "course",
        "name": "–î–æ—Å—Ç—É–ø –∫ –æ–Ω–ª–∞–π–Ω-–∫—É—Ä—Å—É '–ñ–∏–≤–æ–µ –ª–∏—Ü–æ'",
        "description": "–û–Ω–ª–∞–π–Ω-–∫—É—Ä—Å –ê–Ω—Ç–æ–Ω–∏—è –õ–∞–Ω–∏–Ω–∞ '–ñ–∏–≤–æ–µ –ª–∏—Ü–æ'",
        "success_url": "https://t.me/nastroika_tela",
        "fail_url": "https://t.me/nastroika_tela",
        "do": "pay"
    }

    try:
        res = requests.post(url, headers=headers, json=payload, timeout=10)
    except Exception as e:
        print(f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Prodamus API: {e}")
        return None

    print(f"üì° –û—Ç–≤–µ—Ç Prodamus: {res.status_code} ‚Üí {res.text}")
    print("üì° –û—Ç–≤–µ—Ç Prodamus:", res.status_code, "‚Üí", repr(res.text))

    # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON, –µ—Å–ª–∏ –µ—Å—Ç—å
    try:
        data = res.json()
    except Exception:
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ Prodamus")
        return None

    if not res.ok:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ Prodamus API: {res.status_code} ‚Üí {data}")
        return None

    return data.get("url") or data.get("payment_link")

# === /start ===
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    tg_id = message.from_user.id
    pay_url = create_invoice(tg_id)
    if not pay_url:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        return

    text = (
        "–ü—Ä–∏–≤–µ—Ç üåø\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ–ø–ª–∞—Ç–∏—Ç—å –∏ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –æ–Ω–ª–∞–π–Ω-–∫—É—Ä—Å—É –ê–Ω—Ç–æ–Ω–∏—è –õ–∞–Ω–∏–Ω–∞ ¬´–ñ–∏–≤–æ–µ –ª–∏—Ü–æ¬ª.\n\n"
        f"üëâ –û–ø–ª–∞—Ç–∞ –ø–æ —Å—Å—ã–ª–∫–µ:\n{pay_url}\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—à–ª—ë—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª üí´"
    )
    await message.answer(text)

# === –ü–†–û–í–ï–†–ö–ê –ü–û–î–ü–ò–°–ò –û–¢ PRODAMUS ===
def verify_signature(request_body: dict, signature: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –ø—Ä–∏—à—ë–ª –æ—Ç Prodamus"""
    if not signature:
        return False
    key = PRODAMUS_API_KEY
    raw = json.dumps(request_body, ensure_ascii=False, separators=(',', ':'))
    check = hmac.new(key.encode(), msg=raw.encode(), digestmod=hashlib.sha256).hexdigest()
    return check == signature

# === –í–´–î–ê–ß–ê –°–°–´–õ–ö–ò –ü–û–°–õ–ï –û–ü–õ–ê–¢–´ ===
async def handle_access(request):
    data = await request.json()
    signature = request.headers.get("Sign")

    if not verify_signature(data, signature):
        print("‚ö†Ô∏è –ü–æ–¥–ø–∏—Å—å –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –∑–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω")
        return web.Response(text="invalid signature", status=403)

    if data.get("payment_status") != "success":
        return web.Response(text="not success", status=200)

    user_id = data.get("order_num")
    if not user_id:
        return web.Response(text="no user_id", status=400)

    try:
        invite = await bot.create_chat_invite_link(
            chat_id=CHANNEL_ID,
            member_limit=1,
            name=f"access_{user_id}"
        )

        await bot.send_message(
            int(user_id),
            f"üéâ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞!\n\n"
            f"–í–æ—Ç —Ç–≤–æ—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∫—É—Ä—Å:\n\n"
            f"{invite.invite_link}"
        )

        print(f"‚úÖ –î–æ—Å—Ç—É–ø –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        return web.Response(text="ok", status=200)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ —Å—Å—ã–ª–∫–∏: {e}")
        return web.Response(text="error", status=500)

# === –û–ë–†–ê–ë–û–¢–ö–ê –í–ï–ë–•–£–ö–ê –û–¢ TELEGRAM ===
async def handle_webhook(request):
    data = await request.json()
    update = types.Update(**data)
    await dp.feed_update(bot, update)
    return web.Response(text="ok")

# === –ù–ê–°–¢–†–û–ô–ö–ê –í–ï–ë–•–£–ö–ê –ü–†–ò –°–¢–ê–†–¢–ï ===
async def on_startup(app):
    webhook_url = f"{BASE_URL}/webhook"
    await bot.set_webhook(webhook_url)
    print(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")

async def on_cleanup(app):
    await bot.delete_webhook()
    print("üö´ Webhook —É–¥–∞–ª—ë–Ω")

# === APP ===
def create_app():
    app = web.Application()
    app.router.add_post("/webhook", handle_webhook)  # Telegram
    app.router.add_post("/access", handle_access)    # Prodamus webhook
    app.router.add_get("/", lambda _: web.Response(text="ok"))  # Ping
    app.on_startup.append(on_startup)
    app.on_cleanup.append(on_cleanup)
    return app

# === –ó–ê–ü–£–°–ö ===

from aiogram import types

async def handle_webhook(request):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö webhook-–∞–ø–¥–µ–π—Ç–æ–≤ –æ—Ç Telegram"""
    try:
        update = types.Update(**await request.json())
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ webhook: {e}")
        return web.Response(status=400)

    await dp.feed_update(bot, update)
    return web.Response(status=200)


def create_app():
    app = web.Application()
    # POST –¥–ª—è Telegram webhook
    app.router.add_post("/webhook", handle_webhook)
    # POST –¥–ª—è –æ–ø–ª–∞—Ç—ã –æ—Ç Prodamus
    app.router.add_post("/access", handle_access)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    app.router.add_get("/", lambda _: web.Response(text="ok"))
    return app


if __name__ == "__main__":
    app = create_app()
    port = int(os.environ.get("PORT", 8080))
    print("‚úÖ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É", port)
    web.run_app(app, host="0.0.0.0", port=port)




