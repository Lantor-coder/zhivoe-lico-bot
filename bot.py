diff --git a/bot.py b/bot.py
index cbdca34477d282a2d81cf9247dc7113bd463f07f..2da33719bb19bbc40cac8ff8bd8a742322267518 100644
--- a/bot.py
+++ b/bot.py
@@ -1,40 +1,48 @@
-import os
-import json
-import hmac
-import hashlib
-import requests
+import os
+import json
+import hmac
+import hashlib
+from typing import Optional
+
+import requests
 from aiohttp import web
 from aiogram import Bot, Dispatcher, types
 from aiogram.filters import Command
 
 # === –ù–ê–°–¢–†–û–ô–ö–ò ===
-TOKEN = os.getenv("BOT_TOKEN")
-PRODAMUS_API_KEY = os.getenv("PRODAMUS_API_KEY")
-CHANNEL_ID = -1003189812929
-WEBHOOK_URL = "https://zhivoe-lico-bot.onrender.com/webhook"  # ‚Üê —Ç–≤–æ–π Render-–¥–æ–º–µ–Ω
-PRICE = 4500
+TOKEN = os.getenv("BOT_TOKEN")
+PRODAMUS_API_KEY = os.getenv("PRODAMUS_API_KEY")
+CHANNEL_ID = -1003189812929
+WEBHOOK_URL = "https://zhivoe-lico-bot.onrender.com/webhook"  # ‚Üê —Ç–≤–æ–π Render-–¥–æ–º–µ–Ω
+PRICE = 4500
+
+if not TOKEN:
+    raise RuntimeError("BOT_TOKEN environment variable is not set")
+
+if not PRODAMUS_API_KEY:
+    raise RuntimeError("PRODAMUS_API_KEY environment variable is not set")
 
 bot = Bot(token=TOKEN)
 dp = Dispatcher()
 
 
 # === –°–û–ó–î–ê–ù–ò–ï –°–°–´–õ–ö–ò –ù–ê –û–ü–õ–ê–¢–£ ===
 def create_invoice(tg_id: int):
     url = "https://payform.ru/api/v1/invoice"
     headers = {"Authorization": f"Bearer {PRODAMUS_API_KEY}"}
     payload = {
         "sum": PRICE,
         "currency": "rub",
         "order_num": str(tg_id),
         "type": "course",  # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
         "name": "–î–æ—Å—Ç—É–ø –∫ –æ–Ω–ª–∞–π–Ω-–∫—É—Ä—Å—É '–ñ–∏–≤–æ–µ –ª–∏—Ü–æ'",
         "description": "–û–Ω–ª–∞–π–Ω-–∫—É—Ä—Å –ê–Ω—Ç–æ–Ω–∏—è –õ–∞–Ω–∏–Ω–∞ '–ñ–∏–≤–æ–µ –ª–∏—Ü–æ'",
         "success_url": "https://t.me/nastroika_tela",
         "fail_url": "https://t.me/nastroika_tela",
         "do": "pay",
     }
 
     res = requests.post(url, headers=headers, json=payload)
     if not res.ok:
         print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ Prodamus API: {res.status_code} ‚Üí {res.text}")
         return None
@@ -45,84 +53,102 @@ def create_invoice(tg_id: int):
     except Exception as e:
         print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ Prodamus: {e}")
         return None
 
 
 # === /start ===
 @dp.message(Command("start"))
 async def cmd_start(message: types.Message):
     tg_id = message.from_user.id
     pay_url = create_invoice(tg_id)
 
     if not pay_url:
         await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
         return
 
     text = (
         "–ü—Ä–∏–≤–µ—Ç üåø\n\n"
         "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ–ø–ª–∞—Ç–∏—Ç—å –∏ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –æ–Ω–ª–∞–π–Ω-–∫—É—Ä—Å—É –ê–Ω—Ç–æ–Ω–∏—è –õ–∞–Ω–∏–Ω–∞ ¬´–ñ–∏–≤–æ–µ –ª–∏—Ü–æ¬ª.\n\n"
         f"üëâ –û–ø–ª–∞—Ç–∞ –ø–æ —Å—Å—ã–ª–∫–µ:\n{pay_url}\n\n"
         "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—à–ª—ë—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª üí´"
     )
     await message.answer(text)
 
 
 # === –ü–†–û–í–ï–†–ö–ê –ü–û–î–ü–ò–°–ò –û–¢ PRODAMUS ===
-def verify_signature(request_body: dict, signature: str) -> bool:
-    key = PRODAMUS_API_KEY
-    raw = json.dumps(request_body, ensure_ascii=False, separators=(",", ":"))
-    check = hmac.new(key.encode(), msg=raw.encode(), digestmod=hashlib.sha256).hexdigest()
-    return check == signature
+def verify_signature(raw_body: str, signature: Optional[str]) -> bool:
+    if not signature:
+        return False
+
+    expected = hmac.new(
+        PRODAMUS_API_KEY.encode(),
+        msg=raw_body.encode(),
+        digestmod=hashlib.sha256,
+    ).hexdigest()
+    clean_signature = signature.strip().lower()
+    return hmac.compare_digest(expected, clean_signature)
 
 
 # === –í–´–î–ê–ß–ê –°–°–´–õ–ö–ò –ü–û–°–õ–ï –û–ü–õ–ê–¢–´ ===
-async def handle_access(request):
-    data = await request.json()
-    signature = request.headers.get("Sign")
-
-    if not verify_signature(data, signature):
-        print("‚ö†Ô∏è –ü–æ–¥–ø–∏—Å—å –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –∑–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω")
-        return web.Response(text="invalid signature", status=403)
+async def handle_access(request):
+    raw_body = await request.text()
+    signature = request.headers.get("Sign")
+
+    try:
+        data = json.loads(raw_body)
+    except json.JSONDecodeError:
+        print("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ Prodamus")
+        return web.Response(text="invalid json", status=400)
+
+    if not verify_signature(raw_body, signature):
+        print("‚ö†Ô∏è –ü–æ–¥–ø–∏—Å—å –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –∑–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω")
+        return web.Response(text="invalid signature", status=403)
 
     if data.get("payment_status") != "success":
         return web.Response(text="not success", status=200)
 
-    user_id = data.get("order_num")
-    if not user_id:
-        return web.Response(text="no user_id", status=400)
-
-    try:
-        invite = await bot.create_chat_invite_link(
-            chat_id=CHANNEL_ID, member_limit=1, name=f"access_{user_id}"
-        )
-        await bot.send_message(
-            int(user_id),
-            f"üéâ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞!\n\n"
-            f"–í–æ—Ç —Ç–≤–æ—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∫—É—Ä—Å:\n\n"
-            f"{invite.invite_link}",
-        )
-        print(f"‚úÖ –î–æ—Å—Ç—É–ø –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
+    user_id = data.get("order_num")
+    if not user_id:
+        return web.Response(text="no user_id", status=400)
+
+    try:
+        user_id_int = int(user_id)
+    except (TypeError, ValueError):
+        print(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π order_num: {user_id}")
+        return web.Response(text="invalid user_id", status=400)
+
+    try:
+        invite = await bot.create_chat_invite_link(
+            chat_id=CHANNEL_ID, member_limit=1, name=f"access_{user_id}"
+        )
+        message_text = (
+            "üéâ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞!\n\n"
+            "–í–æ—Ç —Ç–≤–æ—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∫—É—Ä—Å:\n\n"
+            f"{invite.invite_link}"
+        )
+        await bot.send_message(user_id_int, message_text)
+        print(f"‚úÖ –î–æ—Å—Ç—É–ø –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
         return web.Response(text="ok", status=200)
     except Exception as e:
         print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ —Å—Å—ã–ª–∫–∏: {e}")
         return web.Response(text="error", status=500)
 
 
 # === WEBHOOK ===
 async def handle_webhook(request):
     """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram"""
     try:
         update = types.Update(**await request.json())
         await dp.feed_update(bot, update)
     except Exception as e:
         print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ webhook: {e}")
     return web.Response(status=200)
 
 
 # === –°–¢–ê–†–¢ –°–ï–†–í–ï–†–ê ===
 async def on_startup(app):
     # –£–¥–∞–ª–∏–º —Å—Ç–∞—Ä—ã–π webhook (–µ—Å–ª–∏ –µ—Å—Ç—å)
     await bot.delete_webhook(drop_pending_updates=True)
     # –£—Å—Ç–∞–Ω–æ–≤–∏–º –Ω–æ–≤—ã–π webhook
     await bot.set_webhook(WEBHOOK_URL)
     print(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
 
