import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiohttp import web
import os

TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = -1003189812929
PRODAMUS_LINK = "https://payform.ru/cd9qXh7/"

bot = Bot(token=TOKEN)
dp = Dispatcher()

# --- Aiogram handlers ---
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    tg_id = message.from_user.id
    pay_link = f"{PRODAMUS_LINK}?custom_fields[telegram_id]={tg_id}"
    text = (
        "–ü—Ä–∏–≤–µ—Ç üåø\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ–ø–ª–∞—Ç–∏—Ç—å –∏ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –æ–Ω–ª–∞–π–Ω-–∫—É—Ä—Å—É –ê–Ω—Ç–æ–Ω–∏—è –õ–∞–Ω–∏–Ω–∞ ¬´–ñ–∏–≤–æ–µ –ª–∏—Ü–æ¬ª.\n\n"
        f"üëâ –û–ø–ª–∞—Ç–∞ –ø–æ —Å—Å—ã–ª–∫–µ:\n{pay_link}\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—à–ª—ë—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª üí´"
    )
    await message.answer(text)


@dp.message(Command("access"))
async def cmd_access(message: types.Message):
    try:
        invite_link = await bot.create_chat_invite_link(chat_id=CHANNEL_ID, member_limit=1)
        await message.answer(
            f"üéâ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞!\n–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª:\n{invite_link.invite_link}"
        )
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –¥–æ—Å—Ç—É–ø–∞ üòî\n{e}")


# --- HTTP "–ø—Å–µ–≤–¥–æ-—Å–µ—Ä–≤–µ—Ä", —á—Ç–æ–±—ã Render –Ω–µ –≤—ã–∫–ª—é—á–∞–ª —Å–µ—Ä–≤–∏—Å ---
async def handle(request):
    return web.Response(text="ok")

async def start_web_server():
    app = web.Application()
    app.router.add_get("/", handle)
    port = int(os.getenv("PORT", 10000))
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", port)
    await site.start()
    print(f"HTTP dummy server running on port {port}")

# --- –ì–ª–∞–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ ---
async def main():
    await asyncio.gather(
        start_web_server(),   # —Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
        dp.start_polling(bot) # aiogram
    )

if __name__ == "__main__":
    asyncio.run(main())



# --- –î–û–ë–ê–í–õ–Ø–ï–ú –í –ö–û–ù–ï–¶ –§–ê–ô–õ–ê ---

from aiogram.filters import Command

CHANNEL_ID = -1003189812929  # ID —Ç–≤–æ–µ–≥–æ –∑–∞–∫—Ä—ã—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞

@dp.message(Command("access"))
async def access_message(message: types.Message):
    try:
        # —Å–æ–∑–¥–∞—ë–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
        invite_link = await bot.create_chat_invite_link(
            chat_id=CHANNEL_ID,
            name=f"access_{message.from_user.id}",
            member_limit=1,   # —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–¥–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞
            expire_date=None  # –±–µ–∑ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
        )

        await message.answer(
            f"üéâ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞!\n\n"
            f"–í–æ—Ç –≤–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∫—É—Ä—Å:\n\n"
            f"{invite_link.invite_link}"
        )

    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏: {e}")



# –õ–æ–≤–∏–º –µ—Å–ª–∏ n8n –ø—Ä–∏—Å–ª–∞–ª –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç "/access"
@dp.message(lambda message: message.text == "/access")
async def access_text_message(message: types.Message):
    try:
        invite_link = await bot.create_chat_invite_link(
            chat_id=CHANNEL_ID,
            name=f"access_{message.from_user.id}",
            member_limit=1,
            expire_date=None
        )

        await message.answer(
            f"üéâ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞!\n\n"
            f"–í–æ—Ç –≤–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∫—É—Ä—Å:\n\n"
            f"{invite_link.invite_link}"
        )
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏: {e}")


