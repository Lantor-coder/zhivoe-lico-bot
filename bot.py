import asyncio
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiohttp import web

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = -1003189812929
PRODAMUS_LINK = "https://payform.ru/cd9qXh7/"

bot = Bot(token=TOKEN)
dp = Dispatcher()


# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ë–û–¢–ê ===
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    tg_id = message.from_user.id
    pay_link = f"{PRODAMUS_LINK}?custom_fields[telegram_id]={tg_id}"
    text = (
        "–ü—Ä–∏–≤–µ—Ç üåø\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ–ø–ª–∞—Ç–∏—Ç—å –∏ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –æ–Ω–ª–∞–π–Ω-–∫—É—Ä—Å—É –ê–Ω—Ç–æ–Ω–∏—è –õ–∞–Ω–∏–Ω–∞ ¬´–ñ–∏–≤–æ–µ –ª–∏—Ü–æ¬ª.\n\n"
        f"üëâ –û–ø–ª–∞—Ç–∞ –ø–æ —Å—Å—ã–ª–∫–µ:\n{pay_link}\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—à–ª—ë—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª üí´"
    )
    await message.answer(text)


@dp.message(Command("access"))
async def cmd_access(message: types.Message):
    """–†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥—ã /access"""
    await give_access(message.from_user.id, message)


# === –õ–û–ì–ò–ö–ê –í–´–î–ê–ß–ò –î–û–°–¢–£–ü–ê ===
async def give_access(user_id: int, message: types.Message | None = None):
    try:
        invite_link = await bot.create_chat_invite_link(
            chat_id=CHANNEL_ID,
            name=f"access_{user_id}",
            member_limit=1,
            expire_date=None,
        )

        text = (
            "üéâ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞!\n\n"
            f"–í–æ—Ç –≤–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∫—É—Ä—Å:\n\n"
            f"{invite_link.invite_link}"
        )

        if message:
            await message.answer(text)
        else:
            await bot.send_message(chat_id=user_id, text=text)

    except Exception as e:
        err = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏: {e}"
        if message:
            await message.answer(err)
        else:
            await bot.send_message(chat_id=user_id, text=err)


# === HTTP-–°–ï–†–í–ï–† –î–õ–Ø RENDER –ò N8N ===
async def handle_access(request):
    """–ú–∞—Ä—à—Ä—É—Ç –¥–ª—è n8n: POST /access"""
    data = await request.json()
    user_id = data.get("telegram_id")
    if not user_id:
        return web.Response(text="No telegram_id", status=400)

    await give_access(int(user_id))
    return web.Response(text="ok", status=200)


async def on_startup(app):
    asyncio.create_task(dp.start_polling(bot))
    print("‚úÖ Aiogram polling started")


def create_app():
    app = web.Application()
    app.router.add_get("/", lambda _: web.Response(text="ok"))  # –ø—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç
    app.router.add_post("/access", handle_access)               # –æ—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è n8n
    app.on_startup.append(on_startup)
    return app


# === –ó–ê–ü–£–°–ö ===
if __name__ == "__main__":
    app = create_app()
    port = int(os.environ.get("PORT", 8080))
    web.run_app(app, host="0.0.0.0", port=port)

from aiogram import types

@dp.message(Command("access"))
async def cmd_access_command(message: types.Message):
    """–°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –µ—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ —Å–∞–º –≤–≤–æ–¥–∏—Ç /access"""
    await send_access_link(message.from_user.id, message)


@dp.message(lambda message: message.text.strip() == "/access")
async def cmd_access_text(message: types.Message):
    """–°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –µ—Å–ª–∏ n8n –ø—Ä–∏—Å–ª–∞–ª —Ç–µ–∫—Å—Ç '/access'"""
    await send_access_link(message.chat.id, message)


async def send_access_link(user_id: int, message: types.Message):
    try:
        invite_link = await bot.create_chat_invite_link(
            chat_id=CHANNEL_ID,
            name=f"access_{user_id}",
            member_limit=1,
            expire_date=None
        )
        await bot.send_message(
            chat_id=user_id,
            text=(
                f"üéâ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞!\n\n"
                f"–í–æ—Ç –≤–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∫—É—Ä—Å:\n\n"
                f"{invite_link.invite_link}"
            )
        )
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏: {e}")




